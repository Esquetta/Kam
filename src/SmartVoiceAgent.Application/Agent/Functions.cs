using AutoGen.Core;
using MediatR;
using SmartVoiceAgent.Application.Commands;
using SmartVoiceAgent.Core.Commands;
using SmartVoiceAgent.Core.Entities;
using System.Text.Json;

namespace SmartVoiceAgent.Application.Agent.Functions;

public partial class Functions
{
    private readonly IMediator _mediator;
    private readonly IIntentDetectionService _intentDetectorService;

    public Functions(IMediator mediator, IIntentDetectionService intentDetectorService)
    {
        _mediator = mediator;
        _intentDetectorService = intentDetectorService;
    }

    /// <summary>
    /// Opens a desktop application based on the given name.
    /// Useful for automating tasks like launching tools or software installed on the system.
    /// </summary>
    /// <param name="applicationName">The name of the application to open. Ex: \"chrome\", \"notepad\".</param>
    /// <returns>A result string about the operation status.</returns>
    [Function]
    public async Task<string> OpenApplicationAsync(string applicationName)
    {
        var result = await _mediator.Send(new OpenApplicationCommand(applicationName));

        return JsonSerializer.Serialize(result);
    }
    /// <summary>
    /// Detects the user's intent based on the given text input and language using a keyword-based pattern matching approach.
    /// This method is useful for understanding natural language commands and routing them to appropriate system actions,
    /// even if the input contains minor speech-to-text (STT) or grammatical errors.
    /// </summary>
    /// <param name="text">The user's input text (typically generated by a speech-to-text engine).</param>
    /// <param name="language">The language of the input text (e.g., "tr" for Turkish, "en" for English).</param>
    /// <param name="cancellationToken">Optional cancellation token for cooperative cancellation.</param>
    /// <returns>
    /// An  that contains the detected intent, confidence score, original text,
    /// recognized entities, and language metadata.
    /// </returns>

    [Function]
    public async Task<string> DetectIntentAsync(string text, string language)
    {
        var intent= await _intentDetectorService.DetectIntentAsync(text, language);

        return JsonSerializer.Serialize(intent, new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            WriteIndented = true
        });
    }
    /// <summary>
    /// Searches the web for the given query and open results on users default browser.
    /// </summary>
    /// <param name="query">Search Query string</param>
    /// <param name="lang">Search Language (Based on users stt language)</param>
    /// <param name="results">Results count  (default: 5)</param>
    /// <returns>Returns command result as json.</returns>
    [Function]
    public async Task<string> SearchWebAsync(string query, string lang = "tr", int results = 5)
    {
        var command = new SearchWebCommand(query, lang, results);
        var result = await _mediator.Send(command);
        return JsonSerializer.Serialize(result, new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            WriteIndented = true
        });
    }


}
